require("dotenv").config();
const express = require("express");
const { neon } = require("@neondatabase/serverless");
const path = require("path");

const app = express();

console.log("üîç DATABASE_URL:", process.env.DATABASE_URL);

if (!process.env.DATABASE_URL) {
    console.error("‚ùå –û–®–ò–ë–ö–ê: DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ .env");
    process.exit(1);
}

const sql = neon(process.env.DATABASE_URL);
console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

// –î–æ–±–∞–≤–ª—è–µ–º JSON –ø–∞—Ä—Å–µ—Ä
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.static(path.join(__dirname, "public")));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ
app.get("/test-db", async (req, res) => {
    try {
        const result = await sql`SELECT NOW()`;
        res.json({ message: "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ —É—Å–ø–µ—à–Ω–æ!", time: result[0] });
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ:", err);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ", details: err.message });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
app.delete("/employees/:id", async (req, res) => {
    const { id } = req.params;
    if (!id) {
        return res.status(400).json({ error: "‚ùå ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!" });
    }

    try {
        const result = await sql`DELETE FROM employees WHERE id = ${id} RETURNING id`;
        if (result.length === 0) {
            return res.status(404).json({ error: "‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
        }
        res.json({ message: "‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª—ë–Ω", id: result[0].id });
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", err);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", details: err.message });
    }
});

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
app.put("/employees/:id", async (req, res) => {
    const { id } = req.params;
    const { first_name, last_name, phone_number, position_id } = req.body;
    if (!id || !first_name || !last_name || !phone_number || !position_id) {
        return res.status(400).json({ error: "‚ùå –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!" });
    }

    try {
        const result = await sql`
            UPDATE employees
            SET first_name = ${first_name}, last_name = ${last_name}, phone_number = ${phone_number}, position_id = ${position_id}
            WHERE id = ${id}
            RETURNING *`;
        
        if (result.length === 0) {
            return res.status(404).json({ error: "‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
        }
        res.json({ message: "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", employee: result[0] });
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", err);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", details: err.message });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
const PORT = process.env.PORT || 5000;
app.listen(PORT, (err) => {
    if (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:", err);
        process.exit(1);
    }
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});